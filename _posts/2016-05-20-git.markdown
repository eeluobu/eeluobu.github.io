---
layout:     post
title:      "Git版本控制"
subtitle:   "常用的Git命令使用"
date:       2016-05-20
author:     "luobu"
header-img: "img/post.jpg"
catalog:    true
tags:
    - 版本控制
    - Git
---


由于没有现成的服务器让我来搭建Git的服务器，就以目前使用最广泛的GitHub作为例子，来进行使用的介绍。


### 创建密钥

为了建立GitHub的远程仓库和本地仓库的联系，需要在本地创建密钥文件，然后复制到GitHub上。

``` bash
ssh-keygen -t rsa -C "1932261722@qq.com"
```

然后提示设置密码，注意和Linux一样，输入的密码在终端里是不会显示的。


密码设置完毕后，在本地的user目录下找到id_rsa.pub文件，打开将内容复制到GitHub网页的SSH Keys中即可。

然后可以测试一下是否成功，即能够和远程仓库通信。

``` bash
ssh -T git@github.com
```


如果是第一次使用的话，会提示要求设置全局用户名和email，以作为每次提交的记录。

``` bash
git config --global user.name "luoyi"
git config --global user.email "1932261722@qq.com"
```


### 创建仓库

这里说的创建仓库是指在本地创建。创建仓库有两种方式，一种是在本地直接创建，另一种是克隆远程的仓库到本地。


#### 本地创建

在本地创建一个repository。

``` bash
git init         #在本地创建repository
```


add 为添加文件，即将文件提交到暂存区，然后 commit 将文件提交到本地仓库。

``` bash
git add .
git commit -m "create repository"
```




#### 远程clone

将远程地址的仓库克隆到当前目录

``` bash
git clone git@github.com:eeluobu/eeluobu.github.io.git  
```

如果之前repository有过push，则必须pull，否则不能提交

``` bash
git pull origin master   #相当于git fetch 和 git merge
```

上面的 pull 相当于下面的 fetch 和 merge 的组合使用，其中 fetch 为更新本地origin/master指针， merge 为合并到master分支。


``` bash      
git fetch origin          #更新本地origin/master指针
git merge origin/master   #合并到master
```

添加文件，并将文件提交到本地仓库。

``` bash
git add .
git commit -m "first post"  #提交到本地repository
```

### 提交到远程仓库


上面的操作只是将文件提交到了本地仓库，要实现Git的协作功能，需要将仓库提交到远程服务器。

首先设置远程提交的地址，即GitHub仓库的地址。

``` bash
git remote add origin https:......
```

然后提交master分支到远程

``` bash
git push origin master
```

### 分支

独特的分支是Git不同于其他版本控制系统的地方，也体现了其强大的功能。要使用Git，首先需要有分支这个概念，然后熟练的掌握各种分支的创建、切换、前进、回退、合并、删除等操作。

#### 创建和切换分支


在当前节点创建一个新的test的分支

``` bash
git branch test 
```


将工作的分支切换到test分支上

``` bash
git checkout test
```


创建没有父节点的分支gh-pages，并切换到这个分支上。在GitHub上创建介绍作品的博客时，通常需要创建这样的分支。

``` bash
git checkout --orphan gh-pages
```



在当前节点创建一个test分支，并切换过去

``` bash
git checkout -b test
```



#### 分支前进和回退


由于commit一次，当前分支前进一步，所以分支的前进和回退即为提交和撤销提交。

``` bash
git commit       #当前分支前进
git reset HEAD^  #回退本地最近commit
git revert HEAD  #回退远程commit
```


#### 删除分支

删除分支比较简单，下面的命令用来删除dev分支。

``` bash
git checkout -d dev
```

#### 合并分支

下面的命令都可以将当前分支合并到dev分支。 

``` bash
git merge dev

git rebase dev
```





#### 其他操作

对 HEAD 的相关操作，其中 HEAD 是当前提交记录的符号名称。 checkout 一个节点后，就会在该节点建立一个 HEAD 。第二个语句还包含了 Git 中位置的相对引用`^`符号，相当于`~1`。

``` bash
git checkout C3             #在C3建立HEAD
git branch -f master HEAD^  #移动master到HEAD~1处
git branch -f master C2     #移动master到C2处
```


下面是 push 参数的应用，将本地的 foo 分支的上一个节点的分支 push 到远程的 master 分支上。其中`foo^`可以替换成本地的任何分支的位置，只要Git能识别就行。

``` bash
git push origin foo^:master
```

同理，下面是 pull 参数的应用。运行 pull 后本地的 o/master 分支不会前进，在本地会有一个新的名称 foo 代替 o/master 前进到相应位置，即对应的远程 master 分支的位置。


``` bash
git pull origin master:foo

# 下面两句和pull效果相同
git fetch origin master:foo
git merge foo
```

以上只是能够使用Git的一些基本操作，也是我们常用的，掌握上面的这些操作是必须的，最好的学习方法就是常常使用它们，[这个网站](http://learngitbranching.js.org/)可以直观的供我们练习这些命令。关于Git的使用，还有很多高级的功能在这里没有介绍，需要在日常使用中不断发现积累。









