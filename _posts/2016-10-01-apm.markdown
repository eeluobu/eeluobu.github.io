---
layout:     post
title:      "分析APM飞控"
subtitle:   "基于Pixhawk飞控的硬件平台"
date:       2016-10-01
author:     "luobu"
header-img: "img/pix.jpg"
catalog:    true
tags:
    - 飞控
    - APM
    - 源码
---




### 程序流程



400Hz

程序流程：
一、update_flight_mode：
update_flight_mode()检查control_mode变量，运行<specific>_run()

flight_mode.cpp
set_mode()
update_flight_mode()


二、<specific>_run（control_<>.cpp文件中）
<>_init()

stabilize_run()：
解析信号输入，设置目标pitch、roll、yaw
althold_run()：
将pitch、roll转换成degrees，yaw转换成deg/s，throttle转换成cm/s


最后：把angles和rates送进Attitude Control或Position Control（AC_AttitudeControl目录）


三、AttitudeControl（AC_AttitudeControl.cpp）：
计算姿态误差、转换到电机控制

控制姿态函数：（常用的3种）

1、angle_ef_roll_pitch_rate_ef_yaw()：
earth frame  
degrees：pitch、roll 
deg/s：yaw

2、angle_ef_roll_pitch_yaw()：
earth frame
degrees：pitch、roll、yaw

3、rate_bf_roll_pitch_yaw()：
body frame
deg/s：pitch、roll、yaw


rate_controller_run()发送 set_roll, set_pitch, set_yaw and set_throttle
到AP_Motors


四、AP_MotorsMatrix（lib/AP_Motors/AP_MotorsMatrix.cpp）：
转换电机控制到每一个电机输出


设置值：
set_roll(), set_pitch(), set_yaw()
-4500~4500

set_throttle()
0~1000



"output_armed" function
hal.rcout->write()

AP_HAL::RCOutput::write：
write(ch, perdiod_us)发送PWM信号到ESCs


其中AP_Motors class负责将pwm信号转化成对应的板子输出引脚





#### 几个主要线程

主要线程：

一、The timer callbacks

二、HAL specific threads
{The UART thread
The timer thread
（hal.scheduler->register_timer_process）高优先级
The IO thread, which supports writing to the microSD card, EEPROM and FRAM
（hal.scheduler->register_io_process）低优先级
}

三、driver specific threads
主要针对asynchronous processing异步进程（程序立即返回，不阻塞，但需要time进程来check返回结果）

四、ardupilot drivers versus platform drivers
ardupilot自己的驱动
对应飞控平台提供的驱动

五、platform specific threads and tasks

hrt_call_every() 处理函数快的程序，因为要禁中断   //6000
work_queue() 处理时间较长的，在the hpwork thread中，要开中断  //HMC5883




六、the AP_Scheduler system
AP_Scheduler::Task
线程调度表


### 线程间同步

一、semaphores            //信号量
get_semaphore()  iic总线上设备的互斥读写


二、lockless data structures
the _shared_data structure应用
libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp

ring buffer实现
libraries/DataFlash/DataFlash_File.cpp

三、The PX4 ORB
_publish_actuators() function in AP_HAL_PX4/RCOutput.cpp. 
//RCOutput将电调ESC的期望值publish到声明的actuator_direct的topic，
//uavcan的主程序可以获得并改变这些值，输出新值到uavcan的ESC上。


其他程序和驱动通信方式：

ioctl calls (see the examples in AP_HAL_PX4/RCOutput.cpp)
/dev/xxx read/write calls (see _timer_tick in AP_HAL_PX4/RCOutput.cpp)



a) 手工飞控：GCS -> (MavLink) -> (uORB topic) -> UAV
b) 信息采集：GCS <- (Mavlink) <- (uORB topic) <- UAV
c) 自治飞控：User App -> (uORB topic) -> (MavLink) -> UAV


添加一个自定义module，使用uORB订阅相关信息（如传感器消息等），发布相关控制信息（如飞行模式控制消息等）（uORB API、uORB消息定义）
控制命令都在PX4Firmware/msg里面



### RC Input and Output

一、RC_Input/Output：
hal.rcin
返回PWM值
hal.rcout
输出pwm值到servo

1ms -- 45度
2ms -- 135度

二、RC_Channel：
负责每一个通道的control_in和servo_out


三、RC_Channel_aux：
设定通道为特定的功能，比如云台的roll控制
RC_Channel_aux::set_servo_out(RC_Channel_aux::k_rudder, 4500);



### Storage and EEPROM


一、AP_HAL::Storage
hal.storage API
init() 
read_block() 
write_block()

在bringup新板或debug的时候使用hal.storage，实际则常使用下面的方式

二、StorageManager 
存储的参数：
parameters
fence points
waypoints
rally points