---
layout:     post
title:      "Linux内核移植"
subtitle:   "基于Linux3.14和Exynos 4412芯片"
date:       2016-06-30
author:     "luobu"
header-img: "img/post.jpg"
catalog:    true

tags:
- linux
- 嵌入式
- kernel
---

之前写过一篇 S3C6410 开发板上移植 Linux 内核的文章，对于嵌入式开发来说，虽然硬件的差别对软件编程的影响很小，但是要认识到这款 arm11 的开发板已经很老了。使用 cortex-A9 系列的Exynos 4412开发板，不仅能体会到在硬件性能上有提高，更能让我们了解到它们在软件方面的一些差异，下面介绍一下在4412上移植Linux3.14内核的过程，和[以前这篇](http://www.eeluobu.com/blog/2016/05/01/kernel)相比还是有一些区别。

### 环境搭建

环境搭建包括：

- 交叉编译工具，用来编译在 arm 端运行的程序；
- tftp服务器，下载u-boot和内核镜像，以及文件系统；
- nfs服务器，挂载文件系统；
- samba服务器，用于Linux和windows文件共享。

具体过程之前都有过介绍，详细的查看[这篇这篇](http://www.eeluobu.com/blog/2016/05/01/kernel)。


### u-boot

u-boot的命令之前也都具体介绍过了，下面主要说一下它的配置和编译过程。



首先介绍一下u-boot的源码结构：

|   文件夹   |         用途        |  文件夹  |         用途         |
| :--------: | :-----------------: | :------: | :------------------: |
|  board     |     开发板相关      |  common  | 主程序和命令实现代码 |
|  arch/arm  | cpu体系架构相关文件 |  disk    |      磁盘支持文件    |
|    fs      |     文件系统        |   doc    |       相关文档       |
|  drivers   |     驱动程序        | include  |      系统头文件      |
|   net      |  网络协议代码       |  tools   | 相关工具（如mkimage）|

u-boot的配置过程如下图，可以看到最终是通过配置好的 `mkconfig` 文件来生产一些编译需要的文件的。

![img](/img/post/u-boot_config.bmp)

此次 u-boot 的移植依靠 samsung 的 demo 板的配置来进行，首先需要在根目录下的 boards.cfg 文件中加入开发板名等一些信息，以便在运行 `make 主板名_config` 命令时，能找到相应的配置文件。

然后运行以下命令，主要是进行配置名的修改。

``` bash
cp board/samsung/origen board/samsung/fs4412 -a
mv board/samsung/fs4412/origen.c board/samsung/fs4412/fs4412.c
cp include/configs/origen.h include/configs/fs4412.h
```

最后要修改一下 board/samsung/fs4412/ 下的 Makefile 文件，即修改最终编译生产的文件。将COBJS += origen.o 修改为 COBJS += fs4412.o 即可。


为了不再编译 u-boot 时在 make 命令后面加上一大串交叉编译工具名，可以直接修改根目录下的 Makefile 文件。

``` bash
ifeq ($(HOSTARCH), $(ARCH))
CROSS_COMPILE ?=
endif

#在这段代码下面添加如下代码

ifeq (arm, $(ARCH))
CROSS_COMPILE ?= arm-none-linux-gnueabi-
endif
```

接下来运行配置命令，然后编译即可

``` bash
make fs4412_config
make
```

编译完成后生成的一些文件：

|  文件名    |        作用       |
| :--------: | :---------------: |
| u-boot     |     可执行文件    |
| u-boot.bin |  二进制可执行文件 |
| System.map |       符号表      |
| u-boot.map |     详细符号表    |
| u-boot.lds |      链接脚本     |


一些清除编译文件的命令

``` bash
make clean    #清除所有中间文件
make clobber  #清除目标文件和配置文件
make disclean #清除所有生成文件
```

下图是 u-boot 编译过程中的流程

![img](/img/post/u-boot_make.bmp)


了解 u-boot 的编译流程后，我们可以自己添加一个模块到 u-boot 中去，可以按照下面的步骤：

- 1、添加源代码：cd drivers --> mkdir uart --> cd uart --> vim uart.c

- 2、添加子Makefile：可以参照 drivers/net/Makefile，然后修改关键变量的值

- 3、修改主Makefile：在根目录下的 Makefile 文件中加入 LIBS-y += drivers/uart/libuart.o

- 4、添加配置项：在 configs/fs4412.h 中添加 #define CONFIG_UART 1，编译时转换成CONFIG_UART = y

关于 u-boot 的移植、配置和编译就到这里，以后有时间还需要研究一下 u-boot 的启动和运行过程等具体实现代码。

### kernel



### 文件系统


