---
layout:     post
title:      "基础数据结构（二）"
subtitle:   "哈希表、树、图"
date:       2016-05-23
author:     "luobu"
header-img: "img/post.jpg"
catalog:    true
tags:
    - structure
---

### 二叉树

每个结点的度都不大于2，每个结点的孩子结点次序不能颠倒，这样的树称之为二叉树。下面是关于二叉树的一些性质：

- 在二叉树的第 n 层至多有 2ⁿ⁻¹ 个结点；

- 深度为 n 的二叉树至多有 2ⁿ-1 个结点；

- 对于一颗二叉树，若终端结点的数量为n₀，度为2的结点数量为n₂，则n₀ = n₂ + 1。

当然根据二叉树的特性，还可以总结出很多其他相关的性质或者规律，就没有一一列举了。

二叉树的存储可以有顺序和链式的结构。顺序结构即用数组来存储元素，对于完全二叉树比较方便，但对于一般的二叉树来说就比较浪费资源了。下面主要介绍的都是基于链式存储结构的二叉树。


``` c
typedef struct node
{
    int data;
    struct node *lchild;
    struct node *rchild;
} tree;
```


#### 二叉树遍历

遍历算法很有用，比如输出二叉树的结点、叶子结点，统计结点、叶子结点的数目等。

先序遍历


``` c
void Pre(tree root)
{
    if(root != NULL)
    {
        Visit(root->data);  //访问根结点函数
        Pre(root->lchild);
        Pre(root->rchild);
    }
}
```

中序遍历

``` c
void In(tree root)
{
    if(root != NULL)
    {
        In(root->lchild);
        Visit(root->data);
        In(root->rchild);
    }
}
```


后序遍历

``` c
void Post(tree root)
{
    if(root != NULL)
    {
        Post(root->lchild);
        Post(root->rchild);
        Visit(root->data);
    }
}
```


中序遍历二叉树的非递归算法

``` c
void In(tree root)
{
    InitStack(&S);  //初始化栈一个空栈S
    p = root;
    while(p != NULL || !Empty(S))
    {
        if(p != NULL)
        {
            Push(&S, p);
            p = p->lchild;
        }
        else
        {
            Pop(&S, &p);
            Visit(p->data);
            p = p->rchild;
        }
    }
}
```

### 二叉树相关排序

#### 二叉排序树

#### 平衡二叉排序树



#### B树




### 哈夫曼树

#### 哈夫曼编码

### 图


图算是比较复杂的数据结构了，面试的时候一般在编程大题里面才会出现，下面介绍一些基本操作。




#### 存储结构


邻接矩阵


邻接表



#### 图的遍历


深度优先搜索


广度优先搜索



#### 应用


